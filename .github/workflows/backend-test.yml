name: Backend Tests Only

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:  # Allow manual trigger

env:
  GO_VERSION: '1.24.3'
  POSTGRES_VERSION: '15'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        package: [utils, models, services, handlers, middleware]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run unit tests for ${{ matrix.package }}
      working-directory: ./backend
      env:
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRATION_HOURS: 8
        ENVIRONMENT: test
      run: |
        go test -v -race -coverprofile=coverage-${{ matrix.package }}.out ./${{ matrix.package }}/...

    - name: Upload coverage for ${{ matrix.package }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.package }}
        path: ./backend/coverage-${{ matrix.package }}.out

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: carjai_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Wait for database
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "Database is ready"
            break
          fi
          echo "Waiting for database... ($i/30)"
          sleep 2
        done

    - name: Run database migrations
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: password
        DB_NAME: carjai_test
        DB_SSLMODE: disable
      run: |
        psql -h localhost -U postgres -d carjai_test -f migrations/001_admin_auth.sql

    - name: Run integration tests
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: password
        DB_NAME: carjai_test
        DB_SSLMODE: disable
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRATION_HOURS: 8
        ENVIRONMENT: test
      run: |
        go test -v -race -timeout=10m ./tests/...

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run security tests
      working-directory: ./backend
      run: |
        go test -v ./tests/ -run TestSecurity

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        working-directory: ./backend

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ./backend/gosec.sarif

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: carjai_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Wait for database
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "Database is ready"
            break
          fi
          echo "Waiting for database... ($i/30)"
          sleep 2
        done

    - name: Run database migrations
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: password
        DB_NAME: carjai_test
        DB_SSLMODE: disable
      run: |
        psql -h localhost -U postgres -d carjai_test -f migrations/001_admin_auth.sql

    - name: Run benchmark tests
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: password
        DB_NAME: carjai_test
        DB_SSLMODE: disable
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRATION_HOURS: 8
        ENVIRONMENT: test
      run: |
        go test -bench=. -benchmem ./utils/...
        go test -bench=. -benchmem ./models/...
        go test -bench=. -benchmem ./services/...

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download all coverage files
      uses: actions/download-artifact@v3

    - name: Combine coverage reports
      working-directory: ./backend
      run: |
        echo "mode: atomic" > coverage-combined.out
        for file in coverage-*.out; do
          if [ -f "$file" ]; then
            tail -n +2 "$file" >> coverage-combined.out
          fi
        done

    - name: Generate coverage report
      working-directory: ./backend
      run: |
        go tool cover -html=coverage-combined.out -o coverage.html
        go tool cover -func=coverage-combined.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage-combined.out
        flags: backend
        name: backend-coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./backend/coverage.html

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, performance-tests, test-coverage]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Report | ${{ needs.test-coverage.result == 'success' && '✅ Generated' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
