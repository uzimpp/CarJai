// src/lib/ocrUtils.ts

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå
 * ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° `fuelType` ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OCR ‡∏Ñ‡∏£‡∏±‡∏ö
 */
export interface CarFormData {
  price: number;
  year?: number;
  mileage?: number;
  province?: string;
  color?: string;
  conditionRating?: number;
  seats?: number;
  doors?: number;
  brand?: string;
  model?: string;
  fuelType?: string; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á
}

/**
 * üó∫Ô∏è ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏•‡∏á Key ‡∏à‡∏≤‡∏Å OCR ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Field ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
 * ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Key ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
 * ‡∏´‡∏≤‡∏Å Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏õ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏Ñ‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
 */
const ocrToFormKeyMap: Record<string, keyof CarFormData> = {
  // --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ ---
  brand_car: "brand",           // ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "brand")
  model: "model",           // ‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "model")
  year_model: "year",            // ‡∏õ‡∏µ‡∏£‡∏ñ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "year")
  color: "color",           // ‡∏™‡∏µ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "color")

  // --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ---
  province: "province",       // ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô

  // --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ---
  number_of_seat: "seats",        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
  fuel_type_name: "fuelType",      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô, ‡∏î‡∏µ‡πÄ‡∏ã‡∏•)
  
};

/**
 * üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡πÄ‡∏õ‡πá‡∏ô Object (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö `ocrToFormKeyMap` ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
 * ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
 */
export const parseOcrData = (ocrText: string): Partial<CarFormData> => {
  const parsedData: Partial<CarFormData> = {};
  if (!ocrText) return parsedData;

  const lines = ocrText.split('\n');

  lines.forEach(line => {
    const separatorIndex = line.indexOf(':');
    if (separatorIndex === -1) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ :

    const key = line.substring(0, separatorIndex).trim();
    const value = line.substring(separatorIndex + 1).trim();
    
    const formKey = ocrToFormKeyMap[key] as keyof CarFormData;

    if (formKey) {
      const numericFields: (keyof CarFormData)[] = [
        'year', 
        'seats',
        // --- field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ---
        'price', 
        'mileage', 
        'conditionRating', 
        'doors',
      ];

      if (numericFields.includes(formKey)) {
        const numericValue = parseInt(value, 10);
        if (!isNaN(numericValue)) {
          parsedData[formKey] = numericValue as never;
        }
      } else {
        parsedData[formKey] = value as never;
      }
    }
  });

  return parsedData;
};