openapi: 3.0.3
info:
  title: CarJai Admin Authentication API
  description: |
    API for CarJai Admin Authentication system
    Features IP whitelist and JWT token authentication
  version: 1.0.0
  contact:
    name: CarJai Team
    email: admin@carjai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.carjai.com
    description: Production server

tags:
  - name: Authentication
    description: Admin authentication endpoints
  - name: IP Management
    description: IP whitelist management
  - name: Health
    description: Health check endpoints

paths:
  /admin/auth/login:
    post:
      tags:
        - Authentication
      summary: Admin login
      description: Admin login with IP whitelist validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
            example:
              username: admin
              password: admin123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401':
          description: Invalid credentials or IP not whitelisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/auth/logout:
    post:
      tags:
        - Authentication
      summary: Admin logout
      description: Admin logout
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLogoutResponse'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current admin info
      description: Get current admin information and session details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminMeResponse'
        '401':
          description: Invalid token or IP not whitelisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Refresh JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/ip-whitelist:
    get:
      tags:
        - IP Management
      summary: Get whitelisted IPs
      description: Get whitelisted IP addresses for admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: IP whitelist retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminIPWhitelistResponse'
        '401':
          description: Invalid token or IP not whitelisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/ip-whitelist/add:
    post:
      tags:
        - IP Management
      summary: Add IP to whitelist
      description: Add IP address to whitelist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminIPWhitelistRequest'
            example:
               ip_address: 10.0.0.100/32
              description: Office IP
      responses:
        '201':
          description: IP added to whitelist successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminIPWhitelistResponse'
        '400':
          description: Invalid IP address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid token or IP not whitelisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/ip-whitelist/remove:
    delete:
      tags:
        - IP Management
      summary: Remove IP from whitelist
      description: Remove IP address from whitelist
      security:
        - bearerAuth: []
      parameters:
        - name: ip
          in: query
          required: true
          description: IP address to remove
          schema:
            type: string
             example: 10.0.0.100/32
      responses:
        '200':
          description: IP removed from whitelist successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminIPWhitelistResponse'
        '400':
          description: IP address not found in whitelist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid token or IP not whitelisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags:
        - Health
      summary: Basic health check
      description: Check system health status
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /admin/health:
    get:
      tags:
        - Health
      summary: Admin health check
      description: Check admin system health status
      responses:
        '200':
          description: Admin system is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminHealthResponse'
        '503':
          description: Admin system is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminHealthResponse'

  /metrics:
    get:
      tags:
        - Health
      summary: System metrics
      description: Get system metrics
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  admins:
                    type: integer
                    example: 5
                  active_sessions:
                    type: integer
                    example: 12
                  whitelisted_ips:
                    type: integer
                    example: 8
                  uptime_seconds:
                    type: number
                    example: 3600.5
                  timestamp:
                    type: string
                    format: date-time

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AdminLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 100
          example: admin
        password:
          type: string
          minLength: 6
          example: admin123

    AdminLoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/AdminAuthData'
        message:
          type: string
          example: Login successful

    AdminAuthData:
      type: object
      properties:
        admin:
          $ref: '#/components/schemas/AdminPublic'
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires_at:
          type: string
          format: date-time

    AdminPublic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: admin
        name:
          type: string
          example: System Administrator
        last_login_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time

    AdminLogoutRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    AdminLogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Logout successful

    AdminMeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/AdminMeData'

    AdminMeData:
      type: object
      properties:
        admin:
          $ref: '#/components/schemas/AdminPublic'
        session:
          $ref: '#/components/schemas/AdminSessionPublic'

    AdminSessionPublic:
      type: object
      properties:
        ip_address:
          type: string
          example: 127.0.0.1
        user_agent:
          type: string
          example: Mozilla/5.0...
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    TokenRefreshResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires_at:
          type: string
          format: date-time
        message:
          type: string
          example: Token refreshed successfully

    AdminIPWhitelistRequest:
      type: object
      required:
        - ip_address
      properties:
        ip_address:
          type: string
             example: 10.0.0.100/32
        description:
          type: string
          maxLength: 255
          example: Office IP

    AdminIPWhitelistResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdminIPWhitelist'
        message:
          type: string
          example: IP address added to whitelist successfully

    AdminIPWhitelist:
      type: object
      properties:
        id:
          type: integer
          example: 1
        admin_id:
          type: integer
          example: 1
        ip_address:
          type: string
             example: 10.0.0.100/32
        description:
          type: string
          example: Office IP
        created_at:
          type: string
          format: date-time

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: 1.0.0
        services:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ServiceStatus'
        uptime:
          type: string
          example: 1h30m45s

    AdminHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        timestamp:
          type: string
          format: date-time
        admin:
          $ref: '#/components/schemas/AdminServiceStatus'
        database:
          $ref: '#/components/schemas/ServiceStatus'
        jwt:
          $ref: '#/components/schemas/ServiceStatus'
        ip_whitelist:
          $ref: '#/components/schemas/ServiceStatus'

    ServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        response_time:
          type: string
          example: 5ms
        error:
          type: string
          example: Connection timeout
        details:
          type: string
          example: Service is running normally

    AdminServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        total_admins:
          type: integer
          example: 5
        active_sessions:
          type: integer
          example: 12
        whitelisted_ips:
          type: integer
          example: 8
        last_login_time:
          type: string
          format: date-time
          nullable: true

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Invalid credentials
        code:
          type: integer
          example: 401
